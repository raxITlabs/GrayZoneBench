# OpenAI Safety Bench - Environment Variables Example
# Copy this file to .env and fill in your actual values
# DO NOT commit .env file to version control - it contains sensitive API keys

# =============================================================================
# OPENAI CONFIGURATION
# =============================================================================
# Required for OpenAI models (gpt-4, gpt-4o, gpt-5-mini, o1, o3-mini, etc.)
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-your-openai-api-key-here

# =============================================================================
# AWS BEDROCK CONFIGURATION (for Anthropic Claude models)
# =============================================================================
# Option 1: Use AWS Profile (Recommended)
# This uses AWS CLI configured profiles (~/.aws/credentials or ~/.aws/config)
AWS_PROFILE=your-aws-profile-name
AWS_REGION=us-east-1

# Option 2: Direct AWS Credentials (Alternative)
# Use this if you don't have AWS CLI configured
# AWS_ACCESS_KEY_ID=your-aws-access-key-id
# AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key
# AWS_REGION=us-east-1

# =============================================================================
# GOOGLE AI CONFIGURATION (for Gemini models)
# =============================================================================
# Required for Google Gemini models (gemini-pro, gemini-1.5-pro, gemini-1.5-flash)
# Get your API key from: https://aistudio.google.com/app/apikey
GOOGLE_API_KEY=your-google-api-key-here

# =============================================================================
# EXAMPLE USAGE AFTER CONFIGURATION
# =============================================================================
# Test your configuration:
# python test_multi_vendor.py
#
# Run multi-provider benchmark:
# uv run python gray-zone-bench.py \
#   --models gpt-5 claude-opus-4-1 gemini-2-5-pro \
#   --judge-model gpt-5 \
#   --judge-task both \
#   --num-prompts 1
#
# =============================================================================
# SUPPORTED MODELS BY PROVIDER (Latest 2025)
# =============================================================================
# OpenAI: gpt-4o, gpt-4o-mini, gpt-4.1-mini, gpt-4.1-nano, gpt-5, gpt-5-pro, gpt-5-mini, gpt-5-nano, o3, o3-mini, o4-mini
# Anthropic: claude-3-haiku, claude-3-5-haiku, claude-3-5-sonnet, claude-3-7-sonnet, claude-opus-4, claude-sonnet-4, claude-opus-4-1
# Google: gemini-2-0-flash, gemini-2-0-flash-001, gemini-2-0-flash-lite-001, gemini-2-0-pro, gemini-2-5-pro, gemini-2-5-flash, gemini-2-5-flash-lite
# =============================================================================

# =============================================================================
# GOOGLE CLOUD STORAGE (Optional - auto-uploads results when configured)
# =============================================================================
# GrayZoneBench can automatically upload benchmark results to Google Cloud Storage.
# This is completely optional - the tool works fine without it.
#
# To enable automatic uploads:
# 1. Create a GCS bucket (e.g., "grayzonebench-results")
# 2. Create a service account with "Storage Object Admin" role on the bucket
# 3. Download the service account JSON key
# 4. Copy the entire JSON and paste it as a single line in GCS_SERVICE_ACCOUNT
# 5. Set GCS_BUCKET_NAME to your bucket name
#
# Example (paste your actual JSON, all on one line):
# GCS_SERVICE_ACCOUNT='{"type":"service_account","project_id":"my-project","private_key_id":"key123","private_key":"-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n","client_email":"uploader@my-project.iam.gserviceaccount.com","client_id":"123456789","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/uploader%40my-project.iam.gserviceaccount.com"}'
# GCS_BUCKET_NAME=grayzonebench-results
#
# When configured, results will be automatically uploaded to:
# - gs://your-bucket/runs/TIMESTAMP/results.json (main results)
# - gs://your-bucket/runs/TIMESTAMP/models/*/  (individual model outputs)
# - gs://your-bucket/latest/results.json (always points to most recent run)
# =============================================================================